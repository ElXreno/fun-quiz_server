// <auto-generated />
using System;
using API.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(ApiDbContext))]
    [Migration("20221119230815_AddCreatedByInQuizEntity")]
    partial class AddCreatedByInQuizEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("API.Entities.Quiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedById")
                        .HasColumnType("text")
                        .HasColumnName("created_by_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_quizzes");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_quizzes_created_by_id");

                    b.ToTable("quizzes", (string)null);
                });

            modelBuilder.Entity("API.Entities.QuizAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("answer");

                    b.Property<int?>("IdQuizQuestions")
                        .HasColumnType("integer")
                        .HasColumnName("id_quiz_questions");

                    b.Property<int?>("IdQuizQuestionsNavigationId")
                        .HasColumnType("integer")
                        .HasColumnName("id_quiz_questions_navigation_id");

                    b.Property<int?>("IdQuizTeams")
                        .HasColumnType("integer")
                        .HasColumnName("id_quiz_teams");

                    b.Property<int?>("IdQuizTeamsNavigationId")
                        .HasColumnType("integer")
                        .HasColumnName("id_quiz_teams_navigation_id");

                    b.HasKey("Id")
                        .HasName("pk_quiz_answers");

                    b.HasIndex("IdQuizQuestionsNavigationId")
                        .HasDatabaseName("ix_quiz_answers_id_quiz_questions_navigation_id");

                    b.HasIndex("IdQuizTeamsNavigationId")
                        .HasDatabaseName("ix_quiz_answers_id_quiz_teams_navigation_id");

                    b.ToTable("quiz_answers", (string)null);
                });

            modelBuilder.Entity("API.Entities.QuizQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("IdQuizStages")
                        .HasColumnType("integer")
                        .HasColumnName("id_quiz_stages");

                    b.Property<int?>("IdQuizStagesNavigationId")
                        .HasColumnType("integer")
                        .HasColumnName("id_quiz_stages_navigation_id");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("question");

                    b.Property<int>("RequiredAnswerType")
                        .HasColumnType("integer")
                        .HasColumnName("required_answer_type");

                    b.Property<string[]>("RightAnswers")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("right_answers");

                    b.Property<string[]>("WrongAnswers")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("wrong_answers");

                    b.HasKey("Id")
                        .HasName("pk_quiz_questions");

                    b.HasIndex("IdQuizStagesNavigationId")
                        .HasDatabaseName("ix_quiz_questions_id_quiz_stages_navigation_id");

                    b.ToTable("quiz_questions", (string)null);
                });

            modelBuilder.Entity("API.Entities.QuizStage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("IdQuizzes")
                        .HasColumnType("integer")
                        .HasColumnName("id_quizzes");

                    b.Property<int?>("IdQuizzesNavigationId")
                        .HasColumnType("integer")
                        .HasColumnName("id_quizzes_navigation_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<short>("ScorePerQuestion")
                        .HasColumnType("smallint")
                        .HasColumnName("score_per_question");

                    b.HasKey("Id")
                        .HasName("pk_quiz_stages");

                    b.HasIndex("IdQuizzesNavigationId")
                        .HasDatabaseName("ix_quiz_stages_id_quizzes_navigation_id");

                    b.ToTable("quiz_stages", (string)null);
                });

            modelBuilder.Entity("API.Entities.QuizTeam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("IdQuizzes")
                        .HasColumnType("integer")
                        .HasColumnName("id_quizzes");

                    b.Property<int?>("IdQuizzesNavigationId")
                        .HasColumnType("integer")
                        .HasColumnName("id_quizzes_navigation_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_quiz_teams");

                    b.HasIndex("IdQuizzesNavigationId")
                        .HasDatabaseName("ix_quiz_teams_id_quizzes_navigation_id");

                    b.ToTable("quiz_teams", (string)null);
                });

            modelBuilder.Entity("API.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_users");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_role_claims_role_id");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_claims_user_id");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_asp_net_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_logins_user_id");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("RoleId")
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_asp_net_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_user_roles_role_id");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_asp_net_user_tokens");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("API.Entities.Quiz", b =>
                {
                    b.HasOne("API.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_quizzes_users_created_by_id");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("API.Entities.QuizAnswer", b =>
                {
                    b.HasOne("API.Entities.QuizQuestion", "IdQuizQuestionsNavigation")
                        .WithMany("QuizAnswers")
                        .HasForeignKey("IdQuizQuestionsNavigationId")
                        .HasConstraintName("fk_quiz_answers_quiz_questions_id_quiz_questions_navigation_id");

                    b.HasOne("API.Entities.QuizTeam", "IdQuizTeamsNavigation")
                        .WithMany("QuizAnswers")
                        .HasForeignKey("IdQuizTeamsNavigationId")
                        .HasConstraintName("fk_quiz_answers_quiz_teams_id_quiz_teams_navigation_id");

                    b.Navigation("IdQuizQuestionsNavigation");

                    b.Navigation("IdQuizTeamsNavigation");
                });

            modelBuilder.Entity("API.Entities.QuizQuestion", b =>
                {
                    b.HasOne("API.Entities.QuizStage", "IdQuizStagesNavigation")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("IdQuizStagesNavigationId")
                        .HasConstraintName("fk_quiz_questions_quiz_stages_id_quiz_stages_navigation_id");

                    b.Navigation("IdQuizStagesNavigation");
                });

            modelBuilder.Entity("API.Entities.QuizStage", b =>
                {
                    b.HasOne("API.Entities.Quiz", "IdQuizzesNavigation")
                        .WithMany("QuizStages")
                        .HasForeignKey("IdQuizzesNavigationId")
                        .HasConstraintName("fk_quiz_stages_quizzes_id_quizzes_navigation_id");

                    b.Navigation("IdQuizzesNavigation");
                });

            modelBuilder.Entity("API.Entities.QuizTeam", b =>
                {
                    b.HasOne("API.Entities.Quiz", "IdQuizzesNavigation")
                        .WithMany("QuizTeams")
                        .HasForeignKey("IdQuizzesNavigationId")
                        .HasConstraintName("fk_quiz_teams_quizzes_id_quizzes_navigation_id");

                    b.Navigation("IdQuizzesNavigation");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_role_claims_asp_net_roles_role_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("API.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_claims_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("API.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_logins_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_roles_role_id");

                    b.HasOne("API.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("API.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_tokens_asp_net_users_user_id");
                });

            modelBuilder.Entity("API.Entities.Quiz", b =>
                {
                    b.Navigation("QuizStages");

                    b.Navigation("QuizTeams");
                });

            modelBuilder.Entity("API.Entities.QuizQuestion", b =>
                {
                    b.Navigation("QuizAnswers");
                });

            modelBuilder.Entity("API.Entities.QuizStage", b =>
                {
                    b.Navigation("QuizQuestions");
                });

            modelBuilder.Entity("API.Entities.QuizTeam", b =>
                {
                    b.Navigation("QuizAnswers");
                });
#pragma warning restore 612, 618
        }
    }
}
